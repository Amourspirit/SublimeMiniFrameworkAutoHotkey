{
	"scope": "source.ahk",
	"completions": [
		{ "trigger": "MfChar.MaxValue", "contents": "MfChar.MaxValue" },
		{ "trigger": "MfChar.MinValue", "contents": "MfChar.MinValue" },

		{ "trigger": "MfChar()", "contents": "MfChar(${1:[val]})" },
		{ "trigger": "MfChar(val, returnAsObj, readonly)", "contents": "MfChar(${1:[val}, ${2:returnAsObj}, ${3:readonly})" },

		{ "trigger": "MfChar.GetNumericValue(c)", "contents": "MfChar.GetNumericValue(${1:c})" },
		{ "trigger": "MfChar.GetNumericValue(s, index)", "contents": "MfChar.GetNumericValue(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.GetUnicodeCategory(c)", "contents": "MfChar.GetUnicodeCategory(${1:c})" },
		{ "trigger": "MfChar.GetUnicodeCategory(s, index)", "contents": "MfChar.GetUnicodeCategory(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.GetValue(c)", "contents": "MfChar.GetValue(${1:c})" },
		{ "trigger": "MfChar.GetValue(s, index)", "contents": "MfChar.GetValue(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsControl(c)", "contents": "MfChar.IsControl(${1:c})" },
		{ "trigger": "MfChar.IsControl(s, index)", "contents": "MfChar.IsControl(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsDigit(c)", "contents": "MfChar.IsDigit(${1:c})" },
		{ "trigger": "MfChar.IsDigit(s, index)", "contents": "MfChar.IsDigit(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsHighSurrogate(c)", "contents": "MfChar.IsHighSurrogate(${1:c})" },
		{ "trigger": "MfChar.IsHighSurrogate(s, index)", "contents": "MfChar.IsHighSurrogate(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsLetter(c)", "contents": "MfChar.IsLetter(${1:c})" },
		{ "trigger": "MfChar.IsLetter(s, index)", "contents": "MfChar.IsLetter(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsLetterOrDigit(c)", "contents": "MfChar.IsLetterOrDigit(${1:c})" },
		{ "trigger": "MfChar.IsLetterOrDigit(s, index)", "contents": "MfChar.IsLetterOrDigit(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsLower(c)", "contents": "MfChar.IsLower(${1:c})" },
		{ "trigger": "MfChar.IsLower(s, index)", "contents": "MfChar.IsLower(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsLowSurrogate(c)", "contents": "MfChar.IsLowSurrogate(${1:c})" },
		{ "trigger": "MfChar.IsLowSurrogate(s, index)", "contents": "MfChar.IsLowSurrogate(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsNumber(c)", "contents": "MfChar.IsNumber(${1:c})" },
		{ "trigger": "MfChar.IsNumber(s, index)", "contents": "MfChar.IsNumber(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsPunctuation(c)", "contents": "MfChar.IsPunctuation(${1:c})" },
		{ "trigger": "MfChar.IsPunctuation(s, index)", "contents": "MfChar.IsPunctuation(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsSeparator(c)", "contents": "MfChar.IsSeparator(${1:c})" },
		{ "trigger": "MfChar.IsSeparator(s, index)", "contents": "MfChar.IsSeparator(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsSurrogate(c)", "contents": "MfChar.IsSurrogate(${1:c})" },
		{ "trigger": "MfChar.IsSurrogate(s, index)", "contents": "MfChar.IsSurrogate(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsSurrogatePair(c)", "contents": "MfChar.IsSurrogatePair(${1:c})" },
		{ "trigger": "MfChar.IsSurrogatePair(s, index)", "contents": "MfChar.IsSurrogatePair(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsSymbol(c)", "contents": "MfChar.IsSymbol(${1:c})" },
		{ "trigger": "MfChar.IsSymbol(s, index)", "contents": "MfChar.IsSymbol(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsUpper(c)", "contents": "MfChar.IsUpper(${1:c})" },
		{ "trigger": "MfChar.IsUpper(s, index)", "contents": "MfChar.IsUpper(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.IsWhiteSpace(c)", "contents": "MfChar.IsWhiteSpace(${1:c})" },
		{ "trigger": "MfChar.IsWhiteSpace(s, index)", "contents": "MfChar.IsWhiteSpace(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.Parse()", "contents": "MfChar.Parse(${1:s})" },
		{ "trigger": "MfChar.ToLower(c)", "contents": "MfChar.ToLower(${1:c})" },
		{ "trigger": "MfChar.ToLower(s, index)", "contents": "MfChar.ToLower(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.ToUpper(c)", "contents": "MfChar.ToUpper(${1:c})" },
		{ "trigger": "MfChar.ToUpper(s, index)", "contents": "MfChar.ToUpper(${1:s}, ${2:index})" },
		{ "trigger": "MfChar.TryParse()", "contents": "MfChar.TryParse(${1:result}, ${2:s})" }
]
}